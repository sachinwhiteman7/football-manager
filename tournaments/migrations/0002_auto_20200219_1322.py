# Generated by Django 3.0.3 on 2020-02-19 13:22

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('teams', '0001_initial'),
        ('tournaments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveSmallIntegerField(default=0)),
                ('number_of_teams', models.PositiveSmallIntegerField(default=4, validators=[django.core.validators.MinValueValidator(2)])),
            ],
        ),
        migrations.CreateModel(
            name='PointsTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Group')),
            ],
        ),
        migrations.AddField(
            model_name='tournament',
            name='no_of_players_per_team',
            field=models.PositiveSmallIntegerField(default=11, validators=[django.core.validators.MaxValueValidator(11)]),
        ),
        migrations.AddField(
            model_name='tournament',
            name='no_of_substitutes_per_team',
            field=models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='no_of_teams',
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='teams',
            field=models.ManyToManyField(to='teams.Team'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='winner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='winner', to='teams.Team'),
        ),
        migrations.CreateModel(
            name='TeamPointsTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('played', models.PositiveSmallIntegerField(default=0)),
                ('points', models.PositiveSmallIntegerField(default=0)),
                ('wins', models.PositiveSmallIntegerField(default=0)),
                ('losses', models.PositiveSmallIntegerField(default=0)),
                ('draws', models.PositiveSmallIntegerField(default=0)),
                ('goal_scored', models.PositiveSmallIntegerField(default=0)),
                ('goal_against', models.PositiveSmallIntegerField(default=0)),
                ('points_table', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.PointsTable')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='teams.Team')),
            ],
        ),
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=256)),
                ('count', models.PositiveSmallIntegerField(default=0)),
                ('stage_type', models.CharField(choices=[('knock out', 'Knock Out'), ('league', 'League')], default='knock out', max_length=24)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Tournament')),
            ],
            options={
                'unique_together': {('tournament', 'count')},
            },
        ),
        migrations.AddField(
            model_name='group',
            name='stage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Stage'),
        ),
        migrations.AddField(
            model_name='group',
            name='teams',
            field=models.ManyToManyField(to='teams.Team'),
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together={('stage', 'count')},
        ),
    ]
